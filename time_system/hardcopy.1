 2 models.py
                                                                                                                       |from django.db import models
                                                                                                                       |from django.contrib.auth import models as auth_models
    def can_clock(self, user_name, status, connection):                                                                |
        '''                                                                                                            |class Employee(models.Model):
        Verifies that a user is able to clock in/out at the current moment                                             |    user = models.ForeignKey(auth_models.User, unique=True)
                                                                                                                       |    hire_date = models.DateField('date employee was hired')
        Parameters:                                                                                                    |    has_salary = models.BooleanField()
            var1 = The user name to verify for                                                                         |    hourly_rate = models.DecimalField(max_digits = 5, decimal_places = 2, null = True, blank=True)
            var2 = The status, which is either "in"/"In" or "out"/"Out", to verify for                                 |    salary = models.DecimalField(max_digits = 8, decimal_places = 2, null = True, blank=True)
            var3 = The connection to the database that contains the needed information to check                        |
                                                                                                                       |    class Meta:
        Returns:                                                                                                       |        db_table = 'Employee'
            True if the user is able to clock in/out and false otherwise                                               |
        '''                                                                                                            |    def __unicode__(self):
                                                                                                                       |        employee = self.user.username + " hired on " + self.hire_date.isoformat()
                                                                                                                       |        if (self.has_salary == True):
        cur = connection.cursor()                                                                                      |            employee += " and has a salary of $" + str(self.salary)
                                                                                                                       |        else:
        try:                                                                                                           |            employee += " and makes $" + str(self.hourly_rate) + " per hour"
            cur.execute('SELECT max(id) AS id, time_in, time_out\                                                      |        return employee
                         FROM time\                                                                                    |
                         WHERE user_name = ?', (user_name,))                                                           |    def clock_in(self):
                                                                                                                       |        max_id = Time.objects.filter(employee=self.user).aggregate(models.Max('employee'))
            result = cur.fetchone()                                                                                    |
            cur.close()                                                                                                |        record = Time.objects.filter(self__id=1)
                                                                                                                       |        print record
            #Base case:  The user has never once clocked in before                                                     |
            if(result[0] == None and (status == 'In' or status == 'in')):                                              |class Time(models.Model):
                return True                                                                                            |    employee = models.ForeignKey('Employee')
                                                                                                                       |    time_in = models.DateTimeField('clock in time')
            #If clocking In make sure the users last record has something recorded in the "clock_out" column.          |    time_out = models.DateTimeField('clock out time', null = True, blank=True)
            #If clocking Out make sure the users last record has something recorder in "clock_in" but not "clock_out"  |
            if((status == 'In' or status == 'in') and result[2] != None):                                              |    class Meta:
                return True                                                                                            |        db_table = 'Time'
            elif((status == 'Out' or status == 'out') and result[1] != None and result[2] == None):                    |
                return True                                                                                            |    def __unicode__(self):
                                                                                                                       |        data = self.employee.user.username + " time_in: " + self.time_in.strftime("%Y-%m-%d %H:%M") + " time_out: "
            print user_name + " is not able to clock " + status #DEBUG                                                 |        if(self.time_out != None):
            return False                                                                                               |            data += self.time_out.strftime("%Y-%m-%d %H:%M")
                                                                                                                       |        return data
        except sqlite3.Error, e:                                                                                       |
            print "Error with executing statement in can_clock():", e.args[0]                                          |
                                                                                                                       |~
                                                                                                                       |~
                                                                                                                       |~
    def clock_in_out(self, user_name, status, connection):                                                             |~
        '''                                                                                                            |~
        Clock a user in/out.  No verification is done to make sure a user can even clock in/out.  Make sure to verify  |~
        using user_exists() and can_clock() first.                                                                     |~
                                                                                                                       |~
        Parameters:                                                                                                    |~
            var1 = The user that is to be clocked in/out                                                               |~
            var2 = "In" or "in" for clocking a user in and "Out" or "out" for clocking a user out                      |~
            var3 = The connection to the database that contains the records of the user's clock in/out data            |~
                                                                                                                       |~
        Returns:                                                                                                       |~
            A datetime object representing the time the user clocked in or out.                                        |~
 <e_clock/time_system/clocker/clocker.py   CWD: /Users/bmurphy/Projects/time_clock/time_system/clocker   Line: 85/138:0  <e_clock/time_system/clocker/models.py   CWD: /Users/bmurphy/Projects/time_clock/time_system/clocker   Line: 25/42:48
"models.py" 42L, 1539C written

